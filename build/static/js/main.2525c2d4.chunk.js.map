{"version":3,"sources":["Components/Header.jsx","Components/Login.jsx","Components/Textbox.jsx","Components/Chatbox.jsx","Components/MainContents.jsx","Components/Footer.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Header","className","Login","props","schema","yup","shape","username","required","password","initialValues","validationSchema","onSubmit","values","setSubmitting","console","log","request","XMLHttpRequest","form","FormData","append","open","serverUrl","onreadystatechange","this","readyState","status","data","JSON","parse","responseText","message_token","stream_token","setTokken","setTokkenStream","setLogin","alert","send","handleSubmit","isSubmitting","touched","errors","Form","type","name","placeholder","component","disabled","Textbox","message","setRequestHeader","tokken","event","target","getResponseHeader","Testbox","Chatbox","chatContainer","React","createRef","date_format","timestamp","date","Date","toLocaleDateString","toLocaleTimeString","renderArray","arr","map","elem","connect","setState","textbox","disconnect","clear_users","start_stream","stream","addEventListener","_event","close","setTokkenServer","addMember","user","addMessage","scrollToMyRef","removeMember","users","addMembers","scroll","current","scrollHeight","clientHeight","scrollTo","state","EventSource","tokkenStream","ref","messages","members","Component","MainContents","login","Footer","App","val","loggedIn","prevState","member","includes","remMember","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2525c2d4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../CSS/header.css\";\n\nconst Header = () => {\n    return (\n        <div className=\"header\">\n            <h1>Chat App</h1>\n        </div>\n    )\n\n}\n\nexport default Header;\n","import React from \"react\";\nimport { Formik, Field, ErrorMessage} from 'formik';\nimport { Form } from \"react-bootstrap\";\nimport * as yup from 'yup';\nimport \"../CSS/login.css\";\n\nconst Login = (props) => {\n    let schema =yup.object().shape({\n        username: yup.string().required(\"Provide a Username\"),\n        password: yup.string().required(\"Provide a Password\")\n    })\n\n    return (\n        <div className=\"login\">\n            \n             <Formik\n                initialValues={{ username: '', password: '' }}\n                validationSchema={schema}\n                onSubmit={(values, { setSubmitting }) => {\n                    console.log(\"here\")\n                    var request = new XMLHttpRequest();\n                    var form = new FormData()\n                    form.append(\"username\", values.username)\n                    form.append(\"password\", values.password)\n                    request.open(\"POST\", props.serverUrl +\"/login\")\n                    request.onreadystatechange = function() {\n                        if (this.readyState !== 4) return;\n                        if (this.status === 201) {\n                            const data = JSON.parse(this.responseText);\n                            console.log(data.message_token)\n                            console.log(data.stream_token)\n                            props.setTokken(data.message_token);\n                            props.setTokkenStream(data.stream_token);\n                            props.setLogin(true)\n                            //start_stream();\n                        } else if (this.status === 403) {\n                            alert(\"Invalid username or password\");\n                        } else if (this.status === 409) {\n                            alert(values.username + \" is already logged in\");\n\n                        } else {\n                            alert(this.status + \" failure to /login\");\n                        }\n                        setSubmitting(false)\n                    };\n                    request.send(form);\n                    \n\n                }}\n             >\n               {({ handleSubmit, isSubmitting, touched, errors }) => (\n                 <Form onSubmit={handleSubmit}>\n                     <div className=\"form-group padding\" >\n                        <div className=\"form-text text-muted\">\n                        Username\n                        </div>\n                        <Field \n                            type=\"username\" \n                            name=\"username\" \n                            placeholder=\"Username\"\n                            className={`form-control ${\n                            touched.username && errors.username ? \"is-invalid\" : \"\"\n                        }`}\n                        />\n                        <ErrorMessage \n                            name=\"username\" \n                            component=\"div\" \n                            className=\"invalid-feedback\"\n                        />\n                    </div>\n                        <div className=\"form-group padding\">\n                        <div className=\"form-text text-muted\">\n                        Password\n                        </div>\n                        <Field \n                            type=\"password\"\n                            name=\"password\"\n                            placeholder=\"Enter password\"\n                            className={`form-control ${\n                            touched.password && errors.password ? \"is-invalid\" : \"\"\n                        }`}\n                        />\n                        <ErrorMessage \n                            name=\"password\" \n                            component=\"div\" \n                            className=\"invalid-feedback\"\n                        />\n                    </div>\n               \n                <div className=\"padding\">\n                    <button \n                        type=\"submit\" \n                        disabled={isSubmitting}\n                        className=\"btn btn-primary\"\n                    >\n                     Login\n                    </button>\n                </div>\n\n                 </Form>\n               )}\n             </Formik>\n           </div>\n                \n    )\n\n}\n\nexport default Login;\n","import React from \"react\";\nimport { Formik, Field, ErrorMessage} from 'formik';\nimport { Form } from \"react-bootstrap\";\nimport * as yup from 'yup';\n\nconst Textbox = (props) => {\n    let schema =yup.object().shape({\n        message: yup.string().required(\"Type a message first\"),\n    })\n\n    return (\n        <div className=\"textmain\">\n            \n             <Formik\n                initialValues={{ message: ''}}\n                validationSchema={schema}\n                onSubmit={(values, { setSubmitting }) => {\n                    console.log(\"here\")\n\n                    var form = new FormData();\n                    form.append(\"message\", values.message)\n\n\n                    var request = new XMLHttpRequest();\n                    request.open(\"POST\", props.serverUrl + \"/message\")\n                    request.setRequestHeader(\n                        \"Authorization\",\n                        \"Bearer \" + props.tokken\n                    );\n                    request.onreadystatechange = function(event) {\n                        if (event.target.readyState === 4 && event.target.status !== 403 && props.tokken !== null) {\n                            props.setTokken(event.target.getResponseHeader(\"token\"));\n                        }\n                        setSubmitting(false)\n                    }\n                    request.send(form);\n\n\n                }}\n             >\n               {({ handleSubmit, isSubmitting, touched, errors }) => (\n                 <Form onSubmit={handleSubmit}>\n                     <div className=\"form-group textbar\" >\n                        <Field \n                            type=\"message\" \n                            name=\"message\" \n                            placeholder={!props.Testbox?\"Type your message here\": \"You are Disconnected\"}\n                            disabled={props.Textbox}\n                            className={`form-control ${\n                            errors.message ? \"is-invalid\" : \"\"\n                        }`}\n                        />\n                        <ErrorMessage \n                            name=\"message\" \n                            component=\"div\" \n                            className=\"invalid-feedback\"\n                        />\n                    </div>\n               \n                <div className=\"sendButton\">\n                    <button \n                    type=\"submit\" \n                    disabled={isSubmitting}\n                    className=\"btn btn-primary\"\n\n                    >\n                     Send\n                    </button>\n                </div>\n\n                 </Form>\n               )}\n             </Formik>\n           </div>\n                \n    )\n\n}\n\nexport default Textbox;\n","import React from \"react\";\nimport { Component } from \"react\";\nimport \"../CSS/chatbox.css\";\nimport Textbox from \"./Textbox.jsx\"\n\n\nclass Chatbox extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            textbox: true,\n\n        }\n        //this.stream = new EventSource(props.serverUrl + \"/server/\" + props.tokkenStream);\n        \n\n    }\n\n    chatContainer = React.createRef();\n\n    date_format= (timestamp) =>  {\n        var date = new Date(timestamp*1000);\n        return date.toLocaleDateString(\"en-US\") + \" \" + date.toLocaleTimeString(\"en-US\");\n\n    }\n    renderArray = (arr) => {\n        return arr.map((elem) => <p>{elem}</p>)\n    }\n    connect = () => {\n        this.setState({\n            textbox:true\n        }, () => {\n            console.log(\"connected\")\n        })\n    }\n    disconnect = (clear_users) => {\n        this.setState({\n            textbox:true\n        }, () => {\n            if(clear_users){\n                this.props.setLogin(false)\n            }\n        })\n    }\n\n    \n    start_stream = (stream) => {\n\n        console.log(this.props)\n        stream.addEventListener(\n            \"open\",\n            (_event) => {\n                this.connect();\n\n            }, false\n        );\n\n        stream.addEventListener(\n            \"Disconnect\",\n            (_event) => {\n                stream.close()\n                this.props.setTokken(\"\")\n                this.props.setTokkenServer(\"\")\n                this.disconnect(true);\n            }, false\n        );\n\n        stream.addEventListener(\n            \"Join\",\n            (event) => {\n                var data = JSON.parse(event.data)\n                this.props.addMember(data.user)\n                this.props.addMessage(this.date_format(data[\"created\"]) + \" JOIN: \" + data.user)\n                this.scrollToMyRef()\n            }, false\n        );\n\n        stream.addEventListener(\n            \"Message\",\n            (event) => {\n                var data = JSON.parse(event.data)\n                console.log(this.props)\n                this.props.addMessage(this.date_format(data[\"created\"]) + \" (\" + data.user + \") \" + data.message)\n                this.scrollToMyRef()\n            }, false\n        );\n\n        stream.addEventListener(\n            \"Part\",\n            (event) => {\n                var data = JSON.parse(event.data)\n                this.props.removeMember(data.user)\n                this.props.addMessage(this.date_format(data[\"created\"]) + \" PART: \" + data.user)\n                this.scrollToMyRef()\n            }, false\n        );\n\n        stream.addEventListener(\n            \"ServerStatus\",\n            (event) => {\n                var data = JSON.parse(event.data)\n                this.props.addMessage(this.date_format(data[\"created\"]) + \" STATUS: \" + data.status)\n                this.scrollToMyRef()\n            }, false\n        );\n\n        stream.addEventListener(\n            \"Users\",\n            (event) => {\n                var data = JSON.parse(event.data)\n                console.log(data.users)\n                this.props.addMembers(data.users)\n                this.scrollToMyRef()\n            }, false\n        );\n        \n        stream.addEventListener(\n            \"error\",\n            (event) => {\n                if (event.target.readyState === 2){\n                    this.props.setTokken(\"\")\n                    this.props.setTokkenStream(\"\")\n                    this.disconnect(true);\n\n                } else {\n                    this.disconnect(false)\n\n                }\n            }, false\n        );\n\n\n    }\n\n    scrollToMyRef = () => {\n        const scroll =\n            this.chatContainer.current.scrollHeight -\n            this.chatContainer.current.clientHeight;\n        this.chatContainer.current.scrollTo(0, scroll);\n    };\n\n    componentDidMount() {\n        let stream = new EventSource(this.props.serverUrl + \"/stream/\" + this.props.tokkenStream);\n        this.start_stream(stream)\n        //this.start_stream()\n\n    }\n\n    render(){\n        return (\n            <div className=\"chatmain\">\n                <div ref={this.chatContainer} className=\"messagebox\">\n                    <div className=\"messages\" >\n                        <h3> Messages </h3>\n                        {this.renderArray(this.props.messages)}\n\n                    </div>\n                    <div className=\"textboxplaceholder\"></div>\n                    <div className=\"textbox\" >\n                        <Textbox \n                            textbox={this.state.textbox}\n                            tokken={this.props.tokken}\n                            setTokken={this.props.setTokken}\n                            serverUrl={this.props.serverUrl}\n                        />\n                    </div>\n                </div>\n                <div className=\"members\" >\n                    <h3> Members </h3>\n                    {this.renderArray(this.props.members)}\n                </div>\n                \n            </div>\n        )\n    }\n\n}\n\nexport default Chatbox;\n\n/*\n     start_stream() {\n        let stream = new EventSource(this.props.serverUrl + \"/server/\" + this.props.tokkenStream)\n\n        stream.addEventListner(\n            \"open\",\n            function(_event){\n                this.connect();\n\n            }\n        );\n\n        stream.addEventListner(\n            \"Disconnect\",\n            function(_event){\n                stream.close()\n                this.props.setTokken(\"\")\n                this.props.setTokkenServer(\"\")\n                this.disconnect(true);\n            }, false\n        );\n\n        stream.addEventListner(\n            \"Join\",\n            function(event){\n                var data = JSON.parse(event.data)\n                this.props.addMember(data.user)\n                this.props.addMessage(this.date_format(data[\"created\"]) + \" JOIN: \" + data.user)\n            }, false\n        );\n\n        stream.addEventListner(\n            \"Message\",\n            function(event){\n                var data = JSON.parse(event.data)\n                this.props.addMessage(this.date_format(data[\"created\"]) + \" (\" + data.user + \") \" + data.message)\n            }, false\n        );\n\n        stream.addEventListner(\n            \"Part\",\n            function(event){\n                var data = JSON.parse(event.data)\n                this.props.removeMember(data.user)\n                this.props.addMessage(this.date_format(data[\"created\"]) + \" PART: \" + data.user)\n            }, false\n        );\n\n        stream.addEventListner(\n            \"Users\",\n            function(event){\n                var data = JSON.parse(event.data)\n                this.props.login(true, this.props.messages, data.users)\n            }, false\n        );\n        \n        stream.addEventListner(\n            \"error\",\n            function(event){\n                if (event.target.readyState === 2){\n                    this.props.setTokken(\"\")\n                    this.props.setTokkenServer(\"\")\n                    this.disconnect(true);\n\n                } else {\n                    this.disconnect(false)\n\n                }\n            }, false\n        );\n\n\n    }\n */\n","import React from \"react\";\nimport Login from \"./Login\"\nimport Chatbox from \"./Chatbox\"\n\nconst MainContents = (props) => {\n    return (\n        <div>\n            {props.login?\n                <Chatbox\n                    addMessage = {props.addMessage}\n                    addMember = {props.addMember}\n                    removeMember = {props.removeMember}\n                    setLogin = {props.setLogin}\n                    setTokken = {props.setTokken}\n                    setTokkenStream = {props.setTokkenStream}\n                    serverUrl = {props.serverUrl}\n                    messages = {props.messages}\n                    members = {props.members}\n                    tokken = {props.tokken}\n                    tokkenStream = {props.tokkenStream}\n                    addMembers = {props.addMembers}\n                />\n            :\n                <Login\n                    setTokken = {props.setTokken}\n                    setTokkenStream = {props.setTokkenStream}\n                    setLogin = {props.setLogin}\n                    serverUrl = {props.serverUrl}\n                />\n            }\n        </div>\n    )\n\n}\n\nexport default MainContents;\n","import React from \"react\";\nimport \"../CSS/footer.css\";\n\n\nconst Footer = () => {\n    return (\n        <div className=\"footer\">\n            <p className=\"footerText\">Chat app for CS291a by Punnal and Shereen</p>\n        </div>\n    )\n\n}\n\nexport default Footer;\n","import { Component } from \"react\";\nimport \"./App.css\";\n\nimport Header from \"./Components/Header\"\nimport MainContents from \"./Components/MainContents\"\nimport Footer from \"./Components/Footer\"\n\n\nclass App extends Component {\n    constructor(){\n        super()\n        this.state = {\n            loggedIn: false,\n            tokken: \"\",\n            tokkenStream: \"\",\n            messages: [],\n            members: [],\n            serverUrl: \"https://chat.cs291.com\",\n        }\n    }\n\n    setTokken = (tokken) => {\n        this.setState({\n            tokken: tokken,\n        })\n    } \n    setTokkenStream = (tokken) => {\n        this.setState({\n            tokkenStream: tokken,\n        })\n    } \n    setLogin = (val) => {\n        this.setState({\n            loggedIn: val,\n        })\n    } \n    addMembers = (members) => {\n        this.setState({\n            members: members,\n        })\n\n    }\n    addMessage = (message) => {\n        this.setState( prevState => {\n            return ({\n                messages: [...prevState.messages, message]\n            })\n\n\n        })\n    } \n    addMember = (member) => {\n        if (this.state.members.includes(member)){\n            return\n        }\n        this.setState( prevState => {\n            return ({\n                members: [...prevState.members, member]\n            })\n        })\n    } \n    removeMember = (remMember) => {\n        this.setState( prevState => {\n            let newMembers = prevState.members.filter((member) => !(member === remMember))\n            return ({\n                members: newMembers\n            })\n        })\n    } \n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header />\n                <MainContents\n                    setTokken = {this.setTokken}\n                    setTokkenStream = {this.setTokkenStream}\n                    setLogin = {this.setLogin}\n                    addMessage = {this.addMessage}\n                    addMember = {this.addMember}\n                    removeMember = {this.removeMember}\n                    serverUrl = {this.state.serverUrl}\n                    login = {this.state.loggedIn}\n                    messages = {this.state.messages}\n                    members = {this.state.members}\n                    tokken = {this.state.tokken}\n                    tokkenStream = {this.state.tokkenStream}\n                    addMembers={this.addMembers}\n                />\n                <Footer />\n            </div>\n        );\n    }\n}\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}